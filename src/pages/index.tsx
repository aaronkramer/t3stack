import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { trpc } from "../utils/trpc";
import { v4 as uuidv4 } from 'uuid';
import styles from './index.module.css'

import { Button, DropdownButton, Dropdown, Card, ListGroup, Stack, FloatingLabel, Form } from 'react-bootstrap';

import Navbar from "../components/NavBar";

const todoMap = new Map<string, { text: string }>([
  ["1", { text: "Item 1", }],
  ["2", { text: "Item 2", }],
])

const itemsArr = ["Item 1", "Item 2"]

const Home: NextPage = () => {
  const [items, setItems] = useState(todoMap)
  const [taskText, setTaskText] = useState('')
  const [isUpdated, setisUpdated] = useState(false)
  const [editableItem, setEditableItem] = useState(null)
  const ref = useRef(null);
  // document.getElementById
  useEffect(() => {
    console.log(`Updates ${items}`)
    setItems(items)
    setisUpdated(false)
  }, [isUpdated, ref])
  const pressedKeys: string[] = []

  return (
    <>
      <Head>
        <title>Aaron's Checklist</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />

      <div className={styles.index}>
        <h1>
          Todo List
        </h1>
        <Form>
          <Stack direction="horizontal" className={styles.inputCard}>

            <FloatingLabel
              className={styles.inputField}
              label="New Todo Item"
              value={taskText}
              rows={1}
              onChange={
                (event) => {
                  setTaskText(event.target.value)
                }
              }
              onKeyDown={
                (event) => {
                  if (!pressedKeys.includes(event.key)) { pressedKeys.push(event.key) }
                  if (pressedKeys.includes('Enter') && pressedKeys.includes('Shift')) { }
                  else if (pressedKeys.includes('Enter')) {
                    todoMap.set(uuidv4(), { text: taskText })
                    setItems(todoMap)
                    setTaskText('')
                    if (!pressedKeys.includes('Control')) {
                      event.currentTarget.blur()
                      pressedKeys.length = 0
                    }
                  } else if (pressedKeys.includes('Escape')) {
                    setTaskText('')
                    event.currentTarget.blur()
                    pressedKeys.length = 0
                  }
                }
              }
              onKeyUp={
                (event) => {
                  const index = pressedKeys.indexOf(event.key)
                  if (index != -1) { pressedKeys.splice(index) }
                }
              }
            >
              <Form.Control type="inputText" placeholder="New Guy" />
            </FloatingLabel>
            <Button variant="primary"
              className="ms-auto"
              type="submit"
              onClick={
                () => {
                  if (taskText) {
                    items.set(uuidv4(), { text: taskText })
                    setItems(items)
                    setTaskText('')
                  }
                }
              }>Add Item</Button>
          </Stack>
        </Form>
        <Card className={styles.spacer}>
          {[...items].map((item) => {

            const itemData = item[1]
            const id = item[0]
            return (
              <ListGroup>
                <ListGroup.Item id={id} >
                  <Stack direction="horizontal" >
                    {itemData.text}
                    <DropdownButton
                      className="ms-auto"
                      title=""
                      onSelect={(eventKey) => {
                        if (eventKey === "edit") {
                          setEditableItem(id)
                          setisUpdated(true)
                        }
                        else if (eventKey === "delete") {
                          items.delete(id)
                          setItems(items)
                          setisUpdated(true)
                        }
                      }
                      }
                    >
                      <Dropdown.Item eventKey="edit">Edit</Dropdown.Item>
                      <Dropdown.Item eventKey="delete">Delete</Dropdown.Item>
                    </DropdownButton>
                  </Stack >
                </ListGroup.Item>
              </ListGroup>
            )
          })
          }
        </Card>
      </div>
    </>
  );
};

export default Home;
