import type { NextPage } from "next";
import Head from "next/head";
import { JSXElementConstructor, ReactElement, ReactFragment, ReactPortal, useEffect, useRef, useState } from "react";
import { trpc } from "../utils/trpc";
import { v4 as uuidv4 } from 'uuid';
import styles from './index.module.css'
import { useSession, signIn, signOut } from "next-auth/react";
import { getToken } from "next-auth/jwt"

import { TreeSelect } from 'primereact/treeselect';
import { Button } from 'primereact/button';
import { Accordion, AccordionTab } from 'primereact/accordion';
import { InputText } from 'primereact/inputtext';

import { InputTextarea } from 'primereact/inputtextarea';

import Navbar from "../components/NavBar";
import { getDefaultState } from "react-query/types/core/mutation";

const sampleSet = [
  {
    id: 1,
    title: "Item 1",
    description: "Description 1",
    user: "Aaron",
    reported: "2021-01-01",
  },
  {
    id: 2,
    title: "Item 2",
    description: "Description 2",
    user: "Aaron",
    reported: "2021-03-01",
  },
]



const Home: NextPage = () => {
  const { data: session } = useSession()
  console.log(session)
  const token = getToken()
  console.log(token)
  const [taskText, setTaskText] = useState('')
  const [activeIndex, setActiveIndex] = useState(-1)
  const [value, setValue] = useState('');
  const { data, isLoading, isFetching } = trpc.useQuery(['task.getAll'], { retry: false })
  const pressedKeys: string[] = []
  const handleInputKeyDown = (event: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (!pressedKeys.includes(event.key)) { pressedKeys.push(event.key) }
    if (pressedKeys.includes('Enter') && pressedKeys.includes('Shift')) { }
    else if (pressedKeys.includes('Enter')) {
      // todoMap.set(uuidv4(), { text: taskText })
      // setItems(todoMap)
      setTaskText('')
      if (!pressedKeys.includes('Control')) {
        event.currentTarget.blur()
        pressedKeys.length = 0
      }
    } else if (pressedKeys.includes('Escape')) {
      setTaskText('')
      event.currentTarget.blur()
      pressedKeys.length = 0
    }
  }
  const handleSubmit = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {
    // self.alert(value)
    data ? console.log(data) : null
    isLoading ? console.log("Loading...") : null
    isFetching ? console.log("Fetching...") : null
  }

  return (
    <>
      <Head>
        <title>Aaron's Checklist</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className='grid place-items-center'>

        <Navbar />

        <div className='grid place-items-center w-[70%]'>
          <h1 className="">
            Todo List
          </h1>
          <div className='w-[100%]' /*'w-[100%] flex flex-row justify-between'*/>
            <InputTextarea value={value} onChange={(e) => setValue(e.target.value)} onKeyDown={(e) => handleInputKeyDown(e)} rows={1} cols={55} autoResize />
            <Button onClick={(e) => handleSubmit(e)} >Press Me!</Button>
          </div>
          <Accordion activeIndex={activeIndex} onTabChange={(e) => setActiveIndex(e.index)}>
            {
              data ?
                data.map((item: { name: string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | ReactFragment | ReactPortal | null | undefined; userId: string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | ReactFragment | ReactPortal | null | undefined; description: string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | ReactFragment | ReactPortal | null | undefined; date: string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | ReactFragment | ReactPortal | null | undefined; }) => {
                  return (
                    <AccordionTab header={
                      <div>
                        <p>{item.name}</p>
                        <p>{item.userId}</p>
                      </div>
                    }>
                      {item.description}
                      {item.date}
                    </AccordionTab>
                  )
                })
                : null
            }
          </Accordion>

        </div>
      </div>
    </>
  );
};

export default Home;
